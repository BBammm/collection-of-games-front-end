import { Component, Injector, OnInit, HostListener, OnDestroy } from '@angular/core';
import { Game } from '../game';
import { InterfaceHalfGame } from '../../../interface/games/half.game';
import { InterfaceHalfMyGame } from '../../../interface/games/half.my.game';

import { trigger, state, style, transition, animate } from '@angular/animations';
import { GAME_HALF, GAMES } from '../../../../environments/environment';
import { takeUntil } from 'rxjs/operators';
import { forEach } from 'lodash';
import { MatDialog } from '@angular/material/dialog';
// import { ModalHalfFairnessComponent } from '../../../global-item/modal-half-fairness/modal-half-fairness.component';
const halfGameInterval = 20;

@Component({
    selector: 'app-half',
    templateUrl: './half.component.html',
    styleUrls: ['./half.component.scss'],
    animations: [
        trigger('cardMovetoListTrigger', [
            // sleep -> 이동전 -> 이동후 -> sleep
            // 이동전
            state('sleep', style({
                display: 'none',
            })),
            state('inactive', style({
            })),
            // 이동후
            state('active', style({
                transform: 'scale(0.4), translateX(-100%)',
                top: '{{animTop}}',
                left: '{{animLeft}}',
                // transform: ''
            }), { params: { animTop: '-500px', animLeft: '-160px' } }),
            transition('sleep => inactive', animate('0ms')),
            transition('inactive => active', animate('500ms ease-in')),
            transition('active => sleep', animate('0ms'))
        ]),
        trigger('cardMovetoListFirstchildTrigger', [
            state('ready', style({

                /* transform: 'scale(0.4)', */
            })),
            state('inactive', style({
                /* opacity: '0' */
            })),
            transition('* => active', [
                style({ opacity: '0' }),
                animate(1000, style({ opacity: '1' })),
            ])
        ])
    ]
})
export class HalfComponent extends Game implements OnDestroy, OnInit {

    //  {hash: '', id: 0, resultNumber: 0, color: 'zero'} - rfaaling 이 끝날때 업데이트 한다.
    public games = [{ id: 0, hash: null, salt: null, resultNumber: null, resultCode: '', cardNum: '', datetime: ''}];
//    public recentGamesHistory: InterfaceHalfGame[] = []; // 최근 10게임에 대한 List
    private myGames: InterfaceHalfMyGame[] = [];
//    public myGamesHistory: InterfaceHalfMyGame[] = []; // 최근 10게임에 대한 List

    //     historyGames = [{hash: null, salt: null, id: 0, resultNumber: null, resultCode: '', cardNum: '', datetime: ''}];
    // public animPos = { animTop: '-200px', animLeft: '-200px' };
    public animPos = { animTop: '200px', animLeft: '-100%' };
    public roundProgress = { currentValue: 0, color: '#ffd740', duration: 16000 };

    // gameStyles = {currentCardDisplay: {display: 'none'}, roundTimerDisplay: {display: 'block'}, flipAnimDisplay: {display: 'none'}};
    public gameStyles = { currentCardDisplay: { display: 'flex' }, roundTimerDisplay: { display: 'block' }, flipAnimDisplay: { display: 'none' } };
    public flipCardStyles = { backgroundPosition: '0px 0px' };
    public finalCardStyles = { backgroundPosition: '0px 0px' };
    private setIntervalFlipCardStyles: any;

    public winItems = { 'LH:H': true, 'LH:L': true, 'OE:O': true, 'OE:E': true };

    public nextGameId: number;
    public currentCardInfo = { cardNum: '' }; // 카드가 이동될대 변경되므로 이곳에 변수값을 넣어서 활용한다.
    public dividendRate: any = { LH: 1.9, OE: 1.9 };

    public recentAnalysis = { sampling_cnt: 20, lh: { lo: 0, hi: 0, lo_ratio: 0, hi_ratio: 0 }, oe: { o: 0, e: 0, o_ratio: 0, e_ratio: 0 } }; // sampling_cnt: 20, 50, 100, 200

    public players = [];
    private participants: any = {};
    private gameStatus = 'play'; // play : 베팅가능, pause: 결과값 수신후 약 4.5초 동안은 게임 중지
    public betAmount = 0;
    public betedCount = { 'LH:L': 0, 'LH:H': 0, 'OE:O': 0, 'OE:E': 0 }; // for display
    public choice: string = null;
    public cardMovetoListState = 'sleep'; // inactive
    public cardOpenedListState = 'inactive';

    public isProgressing: boolean;
    public isBetInit = true;

    public openedCardSum = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0 };

    private serverTime: Date = null; // 서버 시간을 가져와서 세팅시킨다(connection 및 매 게임 결과 전송시 리셋 시킨다.)
    private gameTimer = null;

    // audioCoinChange;

    // playpannel = {offsetWidth: 400, offsetHeight: 220};
    public cardHistoryListCnt = 9;

    @HostListener('window:resize', ['$event']) // 아래 onResize 와 붙어 있어야 함
    protected onResize(): void {
        this.setCardHistoryListCnt();
    }

    constructor(
        protected injector: Injector,
        public dialog: MatDialog,
    ) {
        super(injector);
        this.titleSvc.setTitle('HALF');
        this.assetsUrl = { images: './assets/games/half/images/', sounds: './assets/games/half/sounds/'};
        this.setIcons();
        this.setGameSound();
    }

    private setIcons(): void {
        this.iconRegistry
            .addSvgIcon('arrow-he', this.sanitizer.bypassSecurityTrustResourceUrl(this.assetsUrl.images + 'arrow-he.svg'))
            .addSvgIcon('arrow-ho', this.sanitizer.bypassSecurityTrustResourceUrl(this.assetsUrl.images + 'arrow-ho.svg'))
            .addSvgIcon('arrow-le', this.sanitizer.bypassSecurityTrustResourceUrl(this.assetsUrl.images + 'arrow-le.svg'))
            .addSvgIcon('arrow-lo', this.sanitizer.bypassSecurityTrustResourceUrl(this.assetsUrl.images + 'arrow-lo.svg'))
            ;
    }

    private setGameSound(): void {
        this.setDefaultSound();
        this.addSound('cardMove', this.assetsUrl.sounds + 'card-move.mp3');
        this.addSound('cardFlip', this.assetsUrl.sounds + 'card-flip.mp3');
        this.addSound('cardFlipDone', this.assetsUrl.sounds + 'card-flip-done.mp3');
    }

    public ngOnInit(): void {
        this.ngInit();

        this.socket.init(GAME_HALF.game, GAME_HALF.socketUrl);
        this.requestOtt();



        // this.playpannel = {offsetWidth: window.innerWidth, offsetHeight: window.innerHeight};
        this.setCardHistoryListCnt();

        // this.socket.On('connection') 아래에 다른 On 을 둘 경우 서버 connection이  재 실행될 경우 여러개가 호출됨
        /**
         * @param Object data[0] {hash: "a8e36959c0012f24984ad75ee63031a17e315d60aa456c783e5a787ab9c9d1fc", id: 1000078, resultNumber: 4}
         */
        this.socket.On(GAME_HALF.game, 'game_created')
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((data: any) => {
                const obj: any = data[0];
                this.gameStatus = 'pause';
                this.roundProgress.currentValue = 0;
                this.roundProgress.color = '#ffd740';
                this.roundProgress.duration = 16000;
                // 시간 보정

                if (this.gameTimer) {
                    this.gameTimer.refresh_nowDateTime(obj.serverDateTime);
                }
                // this.resultNum = obj.resultNumber;
                // this.resultNumAttr = {number: this.resultNum, color: this.raffleNumsAttr[this.resultNum].c};
                obj.result_number = obj.resultNumber;
                this.addGames(obj);
                this.cardOpenedListState = 'inactive';
                this.cardMovetoListState = 'sleep';
                this.setOpendCardSum();

                // this.calredBlackRatio();

                // [500] 카드 이동 끝 및 카드플립애니메이션 시작, 프론트 데이타 변경
                setTimeout(() => {
                    this.cardFlipAnim(); // 3.375초간 실행

                    // this.gameStyles.currentCardDisplay = {display: 'none'};
                    this.currentCardInfo = { cardNum: this.numberToString(obj.resultNumber) };
                    this.playGameSound('cardFlip');
                }, 0);
                // 카드 플립이 끝나면 카드 숫자를 디스플레이 한다.
                setTimeout(() => {
                    this.cardMovetoListState = 'inactive';
                    this.playGameSound('cardFlipDone');
                }, 3375);

                // 2625ms 동안 카드 오픈 보여줌 후에 카드 이동
                setTimeout(() => {
                    this.cardMovetoListState = 'active';
                    this.cardOpenedListState = 'active';
                    this.playGameSound('cardMove');
                    this.initSpriteStyle();
                }, 5000);
                setTimeout(() => {
                    this.cardMovetoListState = 'sleep';
                }, 5500);

                // 이동된 카드 숨김 (카드 무비 anim은 500ms 실행)
                // setTimeout(() => {
                // 현재 cardAnim은 "?" 나오게
                // }, 7000);

                // [2500] 카드플립 애니메이션 끝 타이머 시작, 프론트 디스플레이
                this.roundProgress.currentValue = 0;
                this.gameStyles.roundTimerDisplay = { display: 'none' };
                // setTimeout(() => {
                // this.roundProgress.currentValue = 100;
                // this.gameStyles.roundTimerDisplay = {display: 'block'};
                // this.gameStyles.currentCardDisplay = {display: 'flex'};
                // this.inActivateLooseButon(); // 선택이 안될 경우 inactivate 시킨다 (게임 겨로가 발료후 in activate 3초후 원상복구)
                // }, 2500);

                // [4500] 게임 시작전 모든 것을 초기화 한다.
                setTimeout(() => {
                    this.gameStatus = 'play';
                    this.roundProgress.color = '#7fff00';
                    this.players = [];
                    this.participants = {};
                    this.setMyGameList(this.myGames);
                    this.setRecentGameList(this.games);
                    this.setNextGameId();
                    this.displayPoint = this.userInfo.point;
                    this.winItems = { 'LH:H': true, 'LH:L': true, 'OE:O': true, 'OE:E': true };
                    this.choice = '';
                }, 4500);
            });

        /**
         * 모든 게임참여자 정보
         * [{betAmount, selVal, gameId, userInfo: {id, name, point}}]
         */
        this.socket.On(GAME_HALF.game, 'player_bet')
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((data: any) => {

                const participant = data[0].participant;
                this.participants[participant.userInfo.id] = participant;

                this.showPlayers(this.participants);
                // print bet list
            });

        /*
         * 자신이 참여한 게임 결과 (실제적으로는 게임 create 시 받아오나 애니메이션상 결과가 공개될때 메시지 출력(displayUserGameResult()))
         * betAmount, choice, created_at, dividendRate, gameId, id, result, user_id, winAmount}
        */
        this.socket.On(GAME_HALF.game, 'game_result')
        .pipe(takeUntil(this.ngUnsubscribe))
        .subscribe((data: any) => {
            this.myGameResult = {game_id: data[0].gameId, result: data[0].result, win_amount: data[0].winAmount};
            if (this.myGames && this.myGames[0].game_id === data[0].gameId) {
                this.myGames[0].result = data[0].result;
                this.myGames[0].win_amount = data[0].winAmount;
            }

            this.displayUserGameResult(this.myGameResult, () => {
                // 포인트 변경
                if (this.myGameResult && this.myGameResult.result === 'S') {
                    const point = this.userInfo.point + this.myGameResult.win_amount;
                    this.displayPoint = point;
                    this.eventSvc.setPoint(point);
                }
                this.myGameResult = null;
            }); // 사용자 베팅결과 출력
        });
    }

    public ngOnDestroy(): void {
        this.ngDestroy();
    }

    /**
     * @param Object obj {hash: "87407746a124ed77b38ecd2c9ed2f18b84c6d8eec4bfa854625b99a00f2dee9b", id: 1000090, resultNumber: 13}
     */
    private addGames(obj: any): void {

        if (obj.resultNumber === null) { return; }
        // obj.color = this.raffleNumsAttr[obj.resultNumber].c;
        // obj.resultNumber = obj.resultNumber;
        obj.cardNum = this.numberToString(obj.resultNumber);
        obj.resultCode = this.getResultCode(obj.resultNumber);
        // get lo-hi class
        this.games.unshift(obj);

        if (this.games.length > 200) {
            this.games.pop();
        }
    }

    /**
     * 내가 참여했던 게임 결과를 이곳에 저장해 둔다.
     */
    private addMyGames(obj: any): void {
        this.myGames.unshift(obj);

        if (this.myGames.length > 100) {
            this.myGames.pop();
        }
    }

    private requestOtt(): void {
        this.isBetInit = true;
        // 서버에 접근하여 실제 userinfo를 가져온다.
        this.http.requestOtt(GAME_HALF.game, (paramObj: any) => {
            if (paramObj.error === false) {
                this.socket.Emit(GAME_HALF.game, 'join', { ott: paramObj.ott }, (err: string, resp: any) => {
                    if (err) {
                        console.error('Error when joining the game...', err);
                        return;
                    }

                    // 현재 진행되는 게임정보를 받아와서 초기화 시킨다.
                    this.serverTime = resp.serverDateTime; // 서버와의 시간동기화를 위한 서버 시간
                    this.initProgressBar();
                    const reversed = resp.games.reverse(); // connecDataObj.games 도 동시에 reversㄷ 됨
                    this.games = [];
                    for (const entry of reversed) {
                        // entry.cardNum;
                        // entry.resultCode;
                        entry.result_number = entry.resultNumber;
                        this.addGames(entry);
                    }
                    this.setRecentGameList(this.games);

                    this.initSpriteStyle();
                    this.setOpendCardSum();

                    this.currentCardInfo = { cardNum: this.numberToString(this.games[0].resultNumber) };
                    this.cardOpenedListState = 'active';

                    this.setNextGameId();
                    // this.calredBlackRatio();

                    this.dividendRate = resp.dividend;
                    this.participants = resp.participants;
                    this.showPlayers(resp.participants);
                    if (!resp.user) { // 회원정보를 수신 못한 경우
                        return;
                    }

                    const reversedMyGame = resp.bets.reverse(); // connecDataObj.games 도 동시에 reversㄷ 됨
                    for (const rev of reversedMyGame) {
                        this.addMyGames(rev);
                    }

                    this.setMyGameList(this.myGames);

                    this.userInfo.name = resp.user.name;
                    this.userInfo.id = resp.user.id;
                    this.displayPoint = resp.user.point;
                    this.eventSvc.setPoint(resp.user.point);

                    if (resp.bets[0]) {
                        const obj = resp.bets[0];
                        if (obj.gameId === this.games[0].id + 1) {
                            this.isProgressing = true;
                        }
                    }
                });
            } else {
                console.warn(paramObj.message);
            }
        }).finally(() => {
            setTimeout(() => {
                this.isBetInit = false;
            }, 1000);
        });
    }

    private numberToString(n: number): string {
        switch (n) {
            case 1:
                return 'A';
            case 10:
                return 'J';
            case 11:
                return 'Q';
            case 12:
                return 'K';
            default:
                return n.toString();
        }
    }

    private setOpendCardSum(): void {

        this.openedCardSum = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0 };
        const tmpRecentAnalysis = { lh: { lo: 0, hi: 0, lo_ratio: 0, hi_ratio: 0 }, oe: { o: 0, e: 0, o_ratio: 0, e_ratio: 0 } };

        forEach(this.games, (game: any, i: number) => {

            if (i >= this.recentAnalysis.sampling_cnt) {
                return false;
            }
            this.openedCardSum[game.resultNumber]++;

            if (game.resultNumber <= 6) {
                tmpRecentAnalysis.lh.lo++;
            } else {
                tmpRecentAnalysis.lh.hi++;
            }

            const oddEven = game.resultNumber % 2;

            if (oddEven === 0) {
                tmpRecentAnalysis.oe.e++;
            } else {
                tmpRecentAnalysis.oe.o++;
            }

        });
        const total = { lh: 0, oe: 0 };
        total.lh = tmpRecentAnalysis.lh.lo + tmpRecentAnalysis.lh.hi;
        total.oe = tmpRecentAnalysis.oe.e + tmpRecentAnalysis.oe.o;

        this.recentAnalysis.lh = tmpRecentAnalysis.lh;
        this.recentAnalysis.lh.lo_ratio = parseInt((tmpRecentAnalysis.lh.lo / total.lh * 100).toString(), 10);
        this.recentAnalysis.lh.hi_ratio = parseInt((tmpRecentAnalysis.lh.hi / total.lh * 100).toString(), 10);

        this.recentAnalysis.oe = tmpRecentAnalysis.oe;
        this.recentAnalysis.oe.o_ratio = parseInt((tmpRecentAnalysis.oe.o / total.oe * 100).toString(), 10);
        this.recentAnalysis.oe.e_ratio = parseInt((tmpRecentAnalysis.oe.e / total.oe * 100).toString(), 10);

    }

    private initProgressBar(): void {
        const nowTime = new Date(Date.parse(this.serverTime.toLocaleString('en-US', { timeZone: 'Asia/Seoul' }))); // .toLocaleString('en-US', {timeZone: 'Asia/Seoul'});

        const gameterm = halfGameInterval; // 20 sec
        const passSeconds = nowTime.getTime() % (gameterm * 1000);
        const remainSeconds = Math.ceil(((gameterm * 1000) - passSeconds) / 1000);
        let finalRemain = remainSeconds;

        let lastTime = (new Date()).getTime();

        this.roundProgress.duration = 1000; // 1초단위로 duration 처리
        const Render = () => {
            const currentTime = (new Date()).getTime();
            if (currentTime - lastTime >= 1000) {
                lastTime = currentTime;
                finalRemain--;
            }
            // (100 / gameterm)
            this.roundProgress.currentValue = (100 / gameterm) * (gameterm - finalRemain);
            if (finalRemain >= 0 || this.roundProgress.currentValue <= 100) {
                this.animationFrameId = requestAnimationFrame(() => Render());
            } else {
                this.roundProgress.currentValue = 0;
                this.roundProgress.duration = 16000;
            }
        };

        Render();
    }

    /**
     * @param String main : LH, RB, NO
     */
    public doBet(): void {
        if (this.userInfo.id === 0) {
            return this.transSystemMessage('games.alert.NO_LOGIN');
        } else if (this.betAmount < GAMES.minBet) {
            return this.transSystemMessage('games.alert.minBet', { minBet: GAMES.minBet });
        } else if (this.betAmount > GAMES.maxBet) {
            return this.transSystemMessage('games.alert.maxBet', { maxBet: GAMES.maxBet });
        } else if (this.betAmount > this.userInfo.point || this.userInfo.point === 0) {
            return this.transSystemMessage('games.alert.NOT_ENOUGH_MONEY');
        } else if (this.gameStatus !== 'play') {
            return this.transSystemMessage('games.alert.NOT_AVAILABLE_TIME');
        } else if (!this.choice) {
            return this.transSystemMessage('games.alert.selBetItem');
        } else {
            // gameId 는 서버에 저장시 별도로 저장됨
            // this.setbetedCount();
            this.isProgressing = true;
            const betObject = {
                betAmount: this.betAmount,
                selVal: this.choice,
                gameId: null,
                dividendRate: this.calDividenRate(this.choice)
            }; // user_id는 서버측에서 계산
            this.socket.Emit(GAME_HALF.game, 'doBet', betObject, (err: string, resp: any) => {

                if (err) {
                    this.svcMessage(err);
                } else {
                    const point = resp.currentPoint - this.betAmount;
                    this.displayPoint = point; // 실제 업체측 데이타와 동기화
                    this.eventSvc.setPoint(point);

                    this.transSystemMessage('games.alert.BETTED', null, null, 'start', 'success');
                    betObject.gameId = resp.gameInfo.id + 1;

                    this.addMyGames({
                        game_id: betObject.gameId,
                        choice: betObject.selVal,
                        bet_amount: betObject.betAmount,
                        result: 'R',
                        win_amount: 0,
                        created_at: new Date()
                    });
                    this.setMyGameList(this.myGames);
                }
            });
        }
    }

    private calDividenRate(choice: string): number {
        const tmp = choice.split(':');
        return this.dividendRate[tmp[0]];

    }

    /**
     * 참여자 리스트 디스플레이
     * @param Object players [{user_id : {betAmount, selVal, gameId, userInfo: {id, name, point}}}]
     */
    private showPlayers(players: any): void {
        this.players = [];
        this.betedCount = { 'LH:L': 0, 'LH:H': 0, 'OE:O': 0, 'OE:E': 0 };

        forEach(players, (player: any) => {
            //    if (!this.clib.diplayUser( halfGame.serviceInfo.gamblerDisplay)) {
            //        return;
            //    }

            const tmpsp = player.selVal.split(':');
            let betInfo: string;
            switch (tmpsp[0]) {
                case 'LH':
                    switch (tmpsp[1]) {
                        case 'L':
                            this.translate.get('games.half.low')
                                .pipe(takeUntil(this.ngUnsubscribe))
                                .subscribe((value) => {
                                    betInfo = value;
                                });
                            break;
                        case 'H':
                            this.translate.get('games.half.high')
                                .pipe(takeUntil(this.ngUnsubscribe))
                                .subscribe((value) => {
                                    betInfo = value;
                                });
                            break;
                    }
                    break;
                case 'OE':
                    switch (tmpsp[1]) {
                        case 'O':
                            this.translate.get('games.half.odd')
                                .pipe(takeUntil(this.ngUnsubscribe))
                                .subscribe((value) => {
                                    betInfo = value;
                                });
                            break;
                        case 'E':
                            this.translate.get('games.half.even')
                                .pipe(takeUntil(this.ngUnsubscribe))
                                .subscribe((value) => {
                                    betInfo = value;
                                });
                            break;
                    }
                    break;
            }
            const tmp = { betAmount: player.betAmount, bet_result: null, dividendRate: player.dividendRate, betInfo, selVal: player.selVal, userName: player.userInfo.name };
            this.betedCount[player.selVal]++;
            this.players.push(tmp);
        });
    }

    private setNextGameId(): void {
        this.nextGameId = this.games[0].id + 1;
        // this.nextGameId = this.games[0].roundNo + 1;
    }

    public roundProgressBarRenderer(e: number): void {
        if (e >= 95) {
            this.gameStatus = 'ready';
            this.roundProgress.color = '#ffd740';
            this.isProgressing = false;
        }
    }

    private cardFlipAnim(): void {
        let counter = 0;
        clearInterval(this.setIntervalFlipCardStyles);
        // animation play time 45 * 75 = 3375
        this.setIntervalFlipCardStyles = setInterval(() =>
            this.getSpriteStyle(counter++), 45);
    }

    // total 40 frame (common 20, target 20)
    private getSpriteStyle(counter: number): void {
        let xP = '0px';
        let yP = '0px';
        this.setSpriteStyle();

        // const cardtype = this.games[0].resultCode.substr(0, 1); // this.games[0].resultCode.substr(0, 1);
        if (counter < 15) {
            yP = '0px';
        } else if (counter < 30) {
            yP = '-310px';
        } else if (counter < 45) {
            yP = '-620px';
        } else if (counter < 60) {
            yP = '-930px';
        } else if (counter < 75) {
            yP = this.yP();
        } else {
            clearInterval(this.setIntervalFlipCardStyles);

            this.roundProgress.currentValue = 100;
            this.gameStyles.roundTimerDisplay = { display: 'block' };
            // this.gameStyles.currentCardDisplay = {display: 'flex'};
            this.inActivateLooseButon(); // 선택이 안될 경우 inactivate 시킨다 (게임 겨로가 발료후 in activate 3초후 원상복구)
            this.setSpriteStyle();
            return;
        }

        const absPosition = counter % 15;
        xP = -(absPosition * 330) + 'px';
        this.flipCardStyles = { backgroundPosition: xP + ' ' + yP };
        // this.finalCardStyles = {backgroundPosition: xP + ' ' + yP};
    }

    /**
     * 초기 로긴시 default style
     */
    private initSpriteStyle(): void {
        this.flipCardStyles = { backgroundPosition: '0 0' };
    }

    private setSpriteStyle(): void {
        this.finalCardStyles = { backgroundPosition: '0 0' };
        const counter = 74;
        let xP = '0px';
        const yP = this.yP();
        const absPosition = counter % 15;
        xP = -(absPosition * 330) + 'px';
        this.finalCardStyles = { backgroundPosition: xP + ' ' + yP };

    }

    private yP(): string {
        let resultCode: string;
        let yP = '0px';
        const resultNumber = this.games[0].resultNumber; // this.games[0].resultCode.substr(0, 1);
        resultCode = this.getResultCode(resultNumber);

        switch (resultCode) {
            case 'LO':
                yP = '-1240px';
                break;
            case 'LE':
                yP = '-1550px';
                break;
            case 'HO':
                yP = '-1860px';
                break;
            case 'HE':
                yP = '-2170px';
                break;
        }
        return yP;
    }

    private getResultCode(n: number): string {
        let resultCode: string;
        if (n <= 6) {
            resultCode = 'L';
        } else {
            resultCode = 'H';
        }

        const oddEven = n % 2;

        if (oddEven === 0) {
            resultCode += 'E';
        } else {
            resultCode += 'O';
        }
        return resultCode;
    }

    private inActivateLooseButon(): void {
        const lastGameinfo = this.games[0];

        // lastGameinfo.resultCode 를 이용하여 각각에 대한 결과 값을 도출한다.
        const Wins = [];

        if (lastGameinfo.resultNumber <= 6) {
            Wins.push('LH:L');
        } else {
            Wins.push('LH:H');
        }

        const oddEven = lastGameinfo.resultNumber % 2;

        if (oddEven === 0) {
            Wins.push('OE:E');
        } else {
            Wins.push('OE:O');
        }

        this.winItems = { 'LH:H': false, 'LH:L': false, 'OE:O': false, 'OE:E': false };
        for (const entry of Wins) {
            this.winItems[entry] = true;
        }

        forEach(this.players, (game: any) => {
            game.bet_result = this.in_array(game.selVal, Wins) ? 1 : 0;
        });
    }

    private in_array(needle: string, haystack: any): boolean {
        for (const i in haystack) {
            if (haystack[i] === needle) { return true; }
        }
        return false;
    }

    public setHistoryCnt(cnt: number): void {
        this.recentAnalysis.sampling_cnt = cnt;

        this.setOpendCardSum();
    }

    private setCardHistoryListCnt(): void {
        if (window.innerWidth > 800) {
            this.cardHistoryListCnt = 11;
        } else if (window.innerWidth > 700) {
            this.cardHistoryListCnt = 10;
        } else {
            this.cardHistoryListCnt = 9;
        }
    }

    public setBet(main: string, sub: string): void {
        const flag = main + ':' + sub;
        this.choice = flag;
        this.playGameSound('select');
    }
}
