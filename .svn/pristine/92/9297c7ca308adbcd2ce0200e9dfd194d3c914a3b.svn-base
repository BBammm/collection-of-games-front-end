import { Component, Injector, OnInit, OnDestroy } from '@angular/core';
import { Game } from '../game';
import { InterfaceFiftyGame } from '../../../interface/games/fifty.game';
import { InterfaceFiftyMyGame } from '../../../interface/games/fifty.my.game';
import { GAME_FIFTY, GAMES } from '../../../../environments/environment';
import { NgEasingService } from 'ng-easing';
import { takeUntil } from 'rxjs/operators';
import { forEach } from 'lodash';
// import { ModalFiftyFairnessComponent } from '../../../global-item/modal-fifty-fairness/modal-fifty-fairness.component';

@Component({
    selector: 'app-fifty',
    templateUrl: './fifty.component.html',
    styleUrls: ['./fifty.component.scss']
})
export class FiftyComponent extends Game implements OnDestroy, OnInit {
    //  {hash: '', id: 0, result_number: 0, color: 'zero'} - rfaaling 이 끝날때 업데이트 한다.
    // 100개의 게임내역을 미리 저장 (최근 게임내역에 대한 색상을 디스플레이)
    public games: InterfaceFiftyGame[] = [];
    public myGames: InterfaceFiftyMyGame[] = [];
    // games 중에서 최근 10개의 내역을 디스플레이
    public recentGames = [{ id: 0, color: null}];
    public latestResult = { r: 0, g: 0, b: 0, y: 0 }; // for display
    public nextGameId: number;
    public focusOutStyle = { r: null, g: null, b: null, y: null, all: null }; // focus-out : opacity 0.3

    public players = { r: { total: 0, players: [] }, g: { total: 0, players: [] }, b: { total: 0, players: [] }, y: { total: 0, players: [] } };
    private participants: any = {};
    private resultNumAttr: InterfaceFiftyGame; // zero, red, balck

    public dividendRate: any = { r: 0, g: 0, b: 0, y: 0 };

    private gameInit = true; // 중간에 들어온 경우 true, 1회전 한 경우 false;
    private raffleNumsAttr: any = {};
    private indicatorDegree = 75; // 현재 숫자를 가르키는 degree (초기는 0번 숫자)

    // 회전판
    public raffleStyle: any = { transition: 'none 0s ease 0x', transform: 'rotate(50deg)' };
    public cursorColor: string;

    // 회원판 중앙의 state (카운팅, 결과, raffle 메시지 출력)
    // 0 : 남은시간 및 회전판 출력, 180 : 라플링 메시지및 결과숫자 출력
    public gameStateStyle = {
        container: { transition: '600ms ease', transform: 'rotateY(0deg)' },
        counterDisplay: { opacity: '1' },
        countStyle: {     // 22부터 카운 다운
            left: { transform: 'rotate(0deg)', transition: 'none' },
            right: { transform: 'rotate(0deg)', transition: 'none' }
        },
        backDisplay: { opacity: '0' },

        raffleMessageDisplay: { opacity: '1' },
        raffleMessageStyle: { transition: '600ms ease', transform: 'rotateY(0deg)', '-ms-transform': 'rotateY(0deg)' },
        resulteMessageDisplay: { opacity: '0' },
        resulteMessageStyle: { transition: '600ms ease', transform: 'rotateY(180deg)', '-ms-transform': 'rotateY(180deg)' }
    };

    public progressBarStyle = { clip: 'rect(auto, auto, auto, auto)' }; // style="clip: rect(0px, 154px, 154px, 77px);">
    // 중간 {'transition': '-webkit-transform 10000ms cubic-bezier(0.42, 0, 1, 1) -14ms', 'transform': 'rotate(6800deg)'}
    // 최종 {'transition': 'transform 15000ms cubic-bezier(0.32, 0.95, 0.45, 1) -0ms', 'transform': 'rotate(7521.39deg)'}
    private ticktock: number;
    public counterDownTimer = 22;

    public betAmount = 0;
    private isBetted = false;
    // public betedAmount = { r: 0, g: 0, b: 0, y: 0 }; // for display
    private choice: string;
    public choiceColor: string;
    public isProgressing: boolean;
    public isBetInit = false;

    private upDegree: number; // 초기 진입시 각도


    constructor(
        protected injector: Injector,
        private easeSvc: NgEasingService,
    ) {
        super(injector);
        this.titleSvc.setTitle('FIFTY');
        this.assetsUrl = { images: './assets/games/fifty/images/', sounds: './assets/games/fifty/sounds/' };
        this.setGameSound();
    }

    public ngOnInit(): void {
        this.ngInit();
        this.socket.init(GAME_FIFTY.game, GAME_FIFTY.socketUrl);
        this.setRaffleNumsAttr();
        this.requestOtt();
        // this.socket.On('connection') 아래에 다른 On 을 둘 경우 서버 connection이  재 실행될 경우 여러개가 호출됨
        /**
         * @param Object data[0] {hash: "a8e36959c0012f24984ad75ee63031a17e315d60aa456c783e5a787ab9c9d1fc", id: 1000078, resultNumber: 4,}
         */
        this.socket.On(GAME_FIFTY.game, 'game_created')
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((data: any) => {
                const obj: any = data[0];
                this.resultNumAttr = {
                    hash: obj.hash,
                    salt: obj.salt,
                    id: obj.id,
                    result_number: obj.resultNumber,
                    result_code: obj.resultCode,
                    color: this.raffleNumsAttr[obj.resultNumber].color,
                    datetime: obj.datetime
                };
                this.raffleStart(0);
            });

        this.socket.On(GAME_FIFTY.game, 'player_bet')
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((data: any) => {
                const participant = data[0].participant;
                this.participants[participant.userInfo.id] = participant;

                this.showPlayers(this.participants);
                // print bet list
            });
        /**
         * 자신이 참여한 게임 결과 (실제적으로는 게임 create 시 받아오나 애니메이션상 결과가 공개될때 메시지 출력(displayUserGameResult()))
         * betAmount, choice, created_at, dividendRate, gameId, id, result, user_id, winAmount}
         */
        this.socket.On(GAME_FIFTY.game, 'game_result')
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((data: any) => {
                this.myGameResult = {game_id: data[0].gameId, result: data[0].result, win_amount: data[0].winAmount};

                // 현재 내게임 결과에 대해 업데이트
                if (this.myGames && this.myGames[0].game_id === data[0].gameId) {
                    this.myGames[0].result = data[0].result;
                    this.myGames[0].win_amount = data[0].winAmount;
                }
            });

        /*
        카운트 다운
        .bonus-game-state.front timer transform: rotateY(0deg) -> rotateY(18deg)
        .bonus-game-state.back rotateY(0deg) -> rotateY(18deg)
        */
        this.socket.On(GAME_FIFTY.game, 'ticktock')
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe((data: any) => {
                this.ticktock = data[0];
                switch (this.ticktock) {
                    case 0:
                        this.focusOutStyle = { r: null, g: null, b: null, y: null, all: null };
                        this.progressBarStyle = { clip: 'rect(0px, 154px, 154px, 77px)' };
                        this.stateContainerStart();
                        this.setNextGameId();
                        this.playGameSound('flip');

                        // 0 ~ 22 초 사이에 남은 시간을 디스플레이 한다.
                        this.gameStateStyle.countStyle = {
                            left: { transform: 'rotate(360deg)', transition: 'transform 22000ms linear -0ms' },
                            right: { transform: 'rotate(180deg)', transition: 'transform 11000ms linear -0ms' }
                        };
                        break;
                    case 11: // 11초 부터는 카운트 스타일을 변경한다.
                        this.progressBarStyle = { clip: 'rect(auto, auto, auto, auto)' };
                        break;
                    case 18:
                        this.playGameSound('roll');
                        this.rafflePreStart(0);
                        break;
                    case 22:
                        this.stateContainerRafflemessage();
                        this.playGameSound('flip');
                        break;
                    case 23:
                        this.gameStateStyle.countStyle = {
                            left: { transform: 'rotate(0deg)', transition: 'none' },
                            right: { transform: 'rotate(0deg)', transition: 'none' }
                        };
                        break;
                    case 25:
                        // this.raffleStart(); from  game created 에서 받아서 처리
                        break;
                    case 40:
                        // const resultCode = this.getrzbCode(this.resultNumAttr.result_number);
                        if (!this.resultNumAttr) {
                            return;
                        }
                        const resultCode = this.raffleNumsAttr[this.resultNumAttr.result_number].c;
                        this.focusOutStyle[resultCode] = null;
                        // calculator total
                        switch (resultCode) {
                            case 'r':
                                this.players.r.total = this.players.r.total * 3;
                                this.players.g.total = this.players.g.total * -1;
                                this.players.b.total = this.players.b.total * -1;
                                this.players.y.total = this.players.y.total * -1;
                                break;
                            case 'g':
                                this.players.r.total = this.players.r.total * -1;
                                this.players.g.total = this.players.g.total * 5;
                                this.players.b.total = this.players.b.total * -1;
                                this.players.y.total = this.players.y.total * -1;
                                break;
                            case 'b':
                                this.players.r.total = this.players.r.total * -1;
                                this.players.g.total = this.players.g.total * -1;
                                this.players.b.total = this.players.b.total * 2;
                                this.players.y.total = this.players.y.total * -1;
                                break;
                            case 'y':
                                this.players.r.total = this.players.r.total * -1;
                                this.players.g.total = this.players.g.total * -1;
                                this.players.b.total = this.players.b.total * -1;
                                this.players.y.total = this.players.y.total * 50;
                                break;
                        }
                        //    if ()
                        //    this.players = {'r': {total: 0, players: []}, 'b': {total: 0, players: []}, 'z': {total: 0, players: []}};
                        this.stateContainerResultmessage();
                        if (this.isBetted) {
                            this.displayUserGameResult(this.myGameResult, () => {
                                // 포인트 변경
                                if (this.myGameResult && this.myGameResult.result === 'S') {
                                    const point = this.userInfo.point + this.myGameResult.win_amount;
                                    this.displayPoint = point;
                                    this.eventSvc.setPoint(point);
                                    this.myGameResult = null;
                                }
                            }); // 사용자 베팅결과 출력
                        }
                        this.playGameSound('flip');
                        break;
                    case 49: // 게임관련 초기화
                        this.raffleReset();
                        this.choice = null;
                        this.isBetted = false;
                    //    this.setbetedAmount('reset');
                        this.setRecentGameList(this.games);
                        this.players = { r: { total: 0, players: [] }, g: { total: 0, players: [] }, b: { total: 0, players: [] }, y: { total: 0, players: [] } };
                        this.participants = {};
                        break;
                }

                if (this.gameInit === false) {
                    if (this.ticktock >= 0 && this.ticktock <= 22) {
                        this.counterDownTimer = 22 - this.ticktock;
                    }
                }

                if (this.gameInit === true) { // 초기 페이지를 열경우 현재 상태에 따라 다양한 시작 화면 처리

                    if (this.ticktock < 11) {
                        this.progressBarStyle = { clip: 'rect(0px, 154px, 154px, 77px)' };
                    }

                    if (this.ticktock >= 18 && this.ticktock < 25) {
                        this.rafflePreStart((25 - this.ticktock) * 1000);
                    } else if (this.ticktock >= 25 && this.ticktock < 40) {
                        this.raffleStart((40 - this.ticktock) * 1000);
                    }

                    if (this.ticktock < 22) {
                        this.counterDownTimer = 22 - this.ticktock;
                        // this.gameStateResult = {'transition': '600ms ease', 'transform': 'rotateY(0deg)'};

                        // 0 ~ 22 초 사이에 남은 시간을 디스플레이 한다.
                        // const donwcounterms = this.counterDownTimer * 1000;
                        if (this.ticktock > 11) {
                            this.gameStateStyle.countStyle = {
                                left: { transform: 'rotate(360deg)', transition: 'transform 22000ms linear -' + this.ticktock + 's' },
                                right: { transform: 'rotate(180deg)', transition: 'null' }
                            };
                        } else {
                            this.gameStateStyle.countStyle = {
                                left: { transform: 'rotate(360deg)', transition: 'transform 22000ms linear -' + this.ticktock + 's' },
                                right: { transform: 'rotate(180deg)', transition: 'transform 11000ms linear -' + this.ticktock + 's' }
                            };
                        }
                        // this.countStart();
                    } else {
                        // 카운트 스타트
                        this.gameStateStyle.container = { transition: 'none', transform: 'rotateY(180deg)' };
                        this.gameStateStyle.counterDisplay = { opacity: '0' };
                        this.gameStateStyle.backDisplay = { opacity: '1' };

                        if (this.ticktock >= 40) { // 결과 숫자 출력
                            this.gameStateStyle.raffleMessageStyle = { transition: '600ms ease', transform: 'rotateY(180deg)', '-ms-transform': 'rotateY(180deg)' };
                            this.gameStateStyle.raffleMessageDisplay = { opacity: '0' };
                            this.gameStateStyle.resulteMessageStyle = { transition: '600ms ease', transform: 'rotateY(0deg)', '-ms-transform': 'rotateY(0deg)' };
                            this.gameStateStyle.resulteMessageDisplay = { opacity: '1' };
                        }

                        this.focusOutStyle = { r: 'focus-out', g: 'focus-out', b: 'focus-out', y: 'focus-out', all: 'focus-out' };
                    }
                    this.gameInit = false;
                }

                if (this.ticktock >= 22) {
                    this.isProgressing = true;
                } else if (this.isBetted && this.isProgressing) {
                    this.isProgressing = true;
                } else {
                    this.isProgressing = false;
                }
            });

    } // end of constructor

    public ngOnDestroy(): void {
        this.ngDestroy();
    }

    private setGameSound(): void {
        this.setDefaultSound();
        this.addSound('roll', this.assetsUrl.sounds + 'roll-sound.mp3');
        this.addSound('flip', this.assetsUrl.sounds + 'flip.mp3');
    }

    private requestOtt(): void {
        this.http.requestOtt(GAME_FIFTY.game, (paramObj) => {
            this.isBetInit = true;
            if (paramObj.error === false) {
                this.socket.Emit(GAME_FIFTY.game, 'join', { ott: paramObj.ott }, (err: string, resp: any) => {
                    if (err) {
                        console.error('Error when joining the game...', err);
                        return;
                    }

                    const reversedGame = resp.games.reverse(); // connecDataObj.games 도 동시에 reversㄷ 됨
                    for (const rev of reversedGame) {
                        rev.result_code = rev.resultCode;
                        rev.result_number = rev.resultNumber;
                        this.addGames(rev);
                    }

                    // 게임이 생성된 후 게임에 접근하였을 경우 animation이 멈추는 현상으로 인해 이 부분 추가
                    const currgame = reversedGame[reversedGame.length - 1];
                    this.resultNumAttr = {
                        hash: currgame.hash,
                        salt: currgame.salt,
                        id: currgame.id,
                        result_number: currgame.resultNumber,
                        result_code: currgame.resultCode,
                        color: this.raffleNumsAttr[currgame.resultNumber].color,
                        datetime: currgame.datetime
                    };

                    this.setRecentGames();
                    this.setRecentGameList(this.games);
                    this.setNextGameId();

                    // 초기 faffleStyle Setting
                    this.getDegree(this.games[0].result_number);
                    this.setraffleStyle(this.resetDegree());

                    this.dividendRate = resp.dividend;
                    this.participants = resp.participants;
                    this.showPlayers(resp.participants);

                    if (!resp.user) { // 회원정보를 수신 못한 경우
                        return;
                    }

                    // 현재 내가 참여한 정보 보기(현재 게임에서 내가 참여 했을 경우)
                    this.myBetInfo(resp.participants, resp.user.id);

                    const reversedMyGame = resp.bets.reverse(); // connecDataObj.games 도 동시에 reversㄷ 됨
                    for (const rev of reversedMyGame) {
                        this.addMyGames(rev);
                    }


                    this.setMyGameList(this.myGames);
                    // If username is a falsey value the user is not logged in
                    this.userInfo.name = resp.user.username;
                    this.userInfo.id = resp.user.id;
                    this.displayPoint = resp.user.point;
                    this.eventSvc.setPoint(resp.user.point);
                });
            }
        }).finally(() => {
            setTimeout(() => {
                this.isBetInit = false;
            }, 1000);
        });
    }

    /**
     * 모든 게임을 이곳에 저장해 둔다.
     * @param Object obj hash: "87407746a124ed77b38ecd2c9ed2f18b84c6d8eec4bfa854625b99a00f2dee9b", id: 1000090, result_number: 13}
     */
    private addGames(obj: any): void {
        if (obj.result_number === null) { return; }
        obj.color = this.raffleNumsAttr[obj.result_number].color;
        if (!this.games.length || obj.id !== this.games[0].id) {
            this.games.unshift(obj);
        }

        if (this.games.length > 100) {
            this.games.pop();
        }
    }

    /**
     * 내가 참여했던 게임 결과를 이곳에 저장해 둔다.
     */
    private addMyGames(obj: any): void {
        this.myGames.unshift(obj);

        if (this.myGames.length > 100) {
            this.myGames.pop();
        }
    }

    /**
     * 100개의 게임에서 최근 10개의 게임 리스트를 별도로 구하고
     * 100개에 대한 나온 확률을 구한다.
     */
    private setRecentGames(): void {
        this.recentGames = [];
        let i: number;
        for (i = 0; i < 15; i++) {
            if (this.games[i]) {
                this.recentGames.push({ id: this.games[i].id, color: this.games[i].color});
            }
        }

        this.latestResult = { r: 0, g: 0, b: 0, y: 0 };
        for (i = 0; i < this.games.length; i++) {
            switch (this.games[i].color) {
                case 'red':
                    this.latestResult.r++;
                    break;
                case 'green':
                    this.latestResult.g++;
                    break;
                case 'blue':
                    this.latestResult.b++;
                    break;
                case 'yellow':
                    this.latestResult.y++;
                    break;
            }
        }
    }

    // 로딩시 서버에서 처리되는 게임과 화면을 동기화 시킨다.
    // 0 ~ 49 까지의 숫자

    private setraffleStyle(degree: number): void {
        this.raffleStyle = { transition: 'none 0s ease 0s', transform: 'rotate(' + degree + 'deg)' };
        const tmp = Math.round(degree % 360 / 6.66667);
        this.cursorColor = this.raffleNumsAttr[tmp] ? this.raffleNumsAttr[tmp].c : null; // 45가 계산식에 포함됨
    }

    // 7초 + 15 초  = 22초
    private rafflePreStart = (delaytime: number) => {

        const initDegree = this.resetDegree();
        this.easeSvc.animationStart({ duration: 10000, from: initDegree, to: 6800, ease: 'easeInQuart', delay: delaytime }, (v) => {
            this.upDegree = v;
            this.setraffleStyle(this.upDegree);
        },
            () => {

            });

            // this.easeSvc.animationStart({ duration: 10000, from: initDegree, to: 100, ease: 'easeInQuart', delay: delaytime }, (v) => {
            //     this.upDegree = v;
            //     this.setraffleStyle(this.upDegree);
            // },
            //     () => {
            //
            //     });
    }

    private raffleStart = (dalaytime: number) => {
        let resultNum: number;
        if (this.resultNumAttr) {
            if (this.resultNumAttr.result_number === null) { // 값이 생성된 이후 로딩시는 이부분이 존재 하지 않음
                resultNum = this.games[0].result_number;
            } else {
                resultNum = this.resultNumAttr.result_number;
            }

            const finalDegree = this.getDegree(resultNum);

            this.easeSvc.animationStart({ duration: 15000, from: this.upDegree, to: finalDegree, ease: 'easeOutQuart', delay: dalaytime }, (v) => {
                this.setraffleStyle(v);
            },
                () => {
                    this.setraffleStyle(finalDegree);
                });
        }
    }

    // 결과값 출력
    // action3 : 결과값 출력
    // message raffling....
    private stateContainerRafflemessage(): void {
        this.focusOutStyle = { r: 'focus-out', g: 'focus-out', b: 'focus-out', y: 'focus-out', all: 'focus-out' };
        this.gameStateStyle.container = { transition: '600ms ease', transform: 'rotateY(180deg)' };
        this.gameStateStyle.counterDisplay = { opacity: '0' };
        this.gameStateStyle.backDisplay = { opacity: '1' };
        this.gameStateStyle.raffleMessageStyle = { transition: '600ms ease', transform: 'rotateY(0deg)', '-ms-transform': 'rotateY(0deg)' };
        this.gameStateStyle.raffleMessageDisplay = { opacity: '1' };
        this.gameStateStyle.resulteMessageStyle = { transition: '600ms ease', transform: 'rotateY(180deg)', '-ms-transform': 'rotateY(180deg)' };
        this.gameStateStyle.resulteMessageDisplay = { opacity: '0' };
    }

    /**
     * 결과값 디스플레이
     */
    private stateContainerResultmessage(): void {
        this.gameStateStyle.raffleMessageStyle = { transition: '600ms ease', transform: 'rotateY(180deg)', '-ms-transform': 'rotateY(180deg)' };
        this.gameStateStyle.raffleMessageDisplay = { opacity: '0' };
        this.gameStateStyle.resulteMessageStyle = { transition: '600ms ease', transform: 'rotateY(0deg)', '-ms-transform': 'rotateY(0deg)' };
        this.gameStateStyle.resulteMessageDisplay = { opacity: '1' };
        this.addGames(this.resultNumAttr);
        this.setRecentGames();

        this.setraffleStyle(this.resetDegree());
    }

    private raffleReset(): void {
        this.progressBarStyle = { clip: 'rect(0px, 154px, 154px, 77px)' };
    }

    private stateContainerStart(): void {
        this.gameStateStyle.container = { transition: '600ms ease', transform: 'rotateY(0deg)' };
        this.gameStateStyle.counterDisplay = { opacity: '1' };
        this.gameStateStyle.backDisplay = { opacity: '0' };
    }

    // style="transition: 600ms ease; transform: rotateY(0deg);">
    /**
     * 15deg (8번 시작), 15개 section 각 degree : 24;
     */
    private getDegree(num: number): number {
        const preMargin = -3.33333;

        // const firstDegree = 7200 + preMargin;
        const firstDegree = 7200 + preMargin; // 2520 : 초기 로테이트 구간, 1440은 이후 마지막 구간
        // const indexof = this.raffleNums.indexOf(num);
        const secDeg = 360 / 54; // 6.66666
        this.indicatorDegree = num * secDeg + (Math.random() * (6 - 1) + 1); // min : 0 Max 6 이나  경계선 문제로 인해 1 ~ 5 사이의 랜덤을 구한다.
        const finalDegree = firstDegree + this.indicatorDegree;
        return finalDegree;
    }

    private resetDegree(): number {
        const preMargin = -3.33333;
        const firstDegree = preMargin;
        const finalDegree = firstDegree + this.indicatorDegree;

        return finalDegree;
    }
    /**
     * @param String flag : r: red, b: blue, z: zero
     */
    public doBet(): void {
        // this.choice = flag;
        this.choiceColor = this.choice;

        if (this.userInfo.id === 0) {
            return this.transSystemMessage('games.alert.NO_LOGIN');
        } else if (this.isBetted) {
            return this.transSystemMessage('games.alert.ALREADY_PLACED_BET');
        } else if (this.betAmount < GAMES.minBet) {
            return this.transSystemMessage('games.alert.minBet', { minBet: GAMES.minBet });
        } else if (this.betAmount > GAMES.maxBet) {
            return this.transSystemMessage('games.alert.maxBet', { maxBet: GAMES.maxBet });
        } else if (this.betAmount > this.userInfo.point || this.userInfo.point === 0) {
            return this.transSystemMessage('games.alert.NOT_ENOUGH_MONEY');
        } else if (this.ticktock >= 22) {
            return this.transSystemMessage('games.alert.NOT_AVAILABLE_TIME');
        } else if (!this.choiceColor) {
            return this.transSystemMessage('games.alert.selBetItem');
        } else {
            // gameId 및 roundNo는 서버에 저장시 별도로 저장됨
        //    this.setbetedAmount();
            this.isProgressing = true;
            const betObject = {
                betAmount: this.betAmount,
                selVal: this.choice,
                gameId: null
            }; // roundNo 및 user_id는 서버측에서 계산

            this.socket.Emit(GAME_FIFTY.game, 'doBet', betObject, (err: string, resp: any) => {

                // resp: {gameInfo:{hash, id, dice1, dice2, datetime}, userInfo:{id, name, point },
                // playdId,  currentPoint: res.currentPoint}
                if (err) {
                    // diceGame.systemMessage(err);
                    this.svcMessage(err);
                } else {
                    const point = resp.currentPoint - this.betAmount; // 실제 업체측 데이타와 동기화
                    this.displayPoint = point; // 실제 업체측 데이타와 동기화
                    this.eventSvc.setPoint(point);
                    // this.choiceA = resp.gameInfo.resultCode;
                    this.transSystemMessage('games.alert.BETTED', null, null, 'start', 'success');
                    this.isBetted = true;
                    betObject.gameId = resp.gameInfo.id + 1;
                    // 배팅완료된 정보 디스플레이
                    this.addMyGames({
                        game_id: betObject.gameId,
                        choice: betObject.selVal,
                        bet_amount: betObject.betAmount,
                        result: 'R',
                        win_amount: 0,
                        created_at: new Date()
                    });
                    this.setMyGameList(this.myGames);
                }
            });
        }
    }

    /**
     * 초기 접속시 현재 게임에 대한 나의 베팅 내역을 가져와 디스플레이 하기
     */
    private myBetInfo(players: any, userId: number): void {
        // {betAmount: 10000 gameId: 255401 playdId: 0 selVal: "g"}
        if (players[userId]) {
            this.isBetted = true;
            const betinfo = players[userId];
            this.betAmount = betinfo.betAmount;
    //        this.betedAmount[players[userId].selVal] = betinfo.betAmount;
            this.choiceColor = betinfo.selVal;
            this.isProgressing = true;
        }
    }

    /**
     * 참여자 리스트 디스플레이
     * @param Object players [{user_id : {betAmount, selVal, gameId, userInfo: {id, name, point}}}]
     */
    private showPlayers(players: any): void {
        this.players = { r: { total: 0, players: [] }, g: { total: 0, players: [] }, b: { total: 0, players: [] }, y: { total: 0, players: [] } };
        forEach(players, (player: any) => { // , user_id: string
            // if (!this.clib.diplayUser( fiftyGame.serviceInfo.gamblerDisplay)) {
            //    return;
            // }

            const tmp = { betAmount: player.betAmount, userName: player.userInfo.name };
            this.players[player.selVal].total += player.betAmount;
            this.players[player.selVal].players.push(tmp);
        });
    }

    private setNextGameId(): void {
        this.nextGameId = this.games[0].id + 1;
    }

    public setBet(flag: string): void {
        this.choice = flag;
        this.choiceColor = flag;
        this.playGameSound('select');
    }

    private setRaffleNumsAttr(): void {
        for (let i = 0; i < 54; i++) {
            switch (i) {
                // Blue
                case 0: case 2: case 4: case 6: case 8: case 10: case 12: case 14: case 16: case 18: case 20:
                case 22: case 24: case 26: case 28: case 30: case 32: case 34: case 38: case 40: case 42:
                case 44: case 46: case 48: case 50: case 52:
                    this.raffleNumsAttr[i] = { color: 'blue', c: 'b' };
                    break;
                // Green
                case 1: case 3: case 15: case 17: case 25: case 27: case 35: case 37: case 45: case 47:
                    this.raffleNumsAttr[i] = { color: 'green', c: 'g' };
                    break;
                // Red
                case 5: case 7: case 9: case 11: case 13: case 19: case 21: case 23: case 29: case 31: case 33:
                case 39: case 41: case 43: case 49: case 51: case 53:
                    this.raffleNumsAttr[i] = { color: 'red', c: 'r' };
                    break;
                // Yellow
                case 36:
                    this.raffleNumsAttr[i] = { color: 'yellow', c: 'y' };
                    break;
            }
        }
    }
}
